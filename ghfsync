#!/usr/bin/env bash

#===========================================================================================#
# GHF is licensed under the terms of the GPLv3 (https://www.gnu.org/licenses/gpl-3.0.html). #
#                                                                                           #
# (c) MMVII - Christophe Berbizier.                                                         #
#===========================================================================================#

VER=0.1

usage() {
    echo "Usage: ${0##*/} [-s|-r <name>...] [-A <name> <URL>...] [-D <name>...] [-L] <repo>"
    echo "       ${0##*/} -n [-u <URL>] <repo>"
    echo "       ${0##*/} -l [-u <URL>] <repo> [/path/to/key]"
    echo "  -s|--status check synchronisation status"
    echo "  -a|--all synchronise with all remote repositories"
    echo "  -A|--add <name> <URL> add remote repository <URL> with alias <name>"
    echo "  -D|--delete <name> delete remote repository with alias <name>"
    echo "  -L|--list list remote repositories"
    echo "  -r|--remote <remote> synchronise only <remote> repository"
    echo "  -p|--push push local changes to remote repositories"
    echo
    echo "  -n|--new <repo> create a new shared repository"
    echo "  -u|--url <URL> specify origin URL to use"
    echo
    echo "  -l|--link <repo> link an existing repository in <repo>"
    echo "  -u|--url <URL> specify origin URL to use"
    echo "  /path/to/key path to the symetric key"
}

## basic requirements
RURL=
! [[ -d "$RHOME" ]] && echo "Missing GHF root directory" && exit 1

[[ -f $HOME/.ghfsyncrc ]] && . $HOME/.ghfsyncrc
[[ -f $HOME/.config/ghfsync/ghfsync.conf ]] && . $HOME/.config/ghfsync/ghfsync.conf

RHOME=${RHOME:-$HOME/Shared}

## parse options
REPO=
STATUS=0
SYNC_ALL=0
REMOTE=()
PUSH=0
NEW_REPO=0
LINK=0
REMOTE_URL=
KEY=
ADD_REPO=0
DEL_REPO=0
LIST=0
declare -A remotes
while (($#)); do
    case $1 in
        -h|--help)
            usage
            exit 0;;
        -v|--version)
            echo "GHF v$VER - (c) MMVII, Christophe Berbizier."
            echo "GHF is licensed under the terms of the GPLv3."
            exit 0;;
        -n|--new)
            NEW_REPO=1
            REPO=$2
            shift;;
        -l|--link)
            LINK=1
            REPO=$2
            shift;;
        -u|--url)
            REMOTE_URL=$2
            shift;;
        -s|--status)
            STATUS=1;;
        -a|--add)
            SYNC_ALL=1;;
        -r|--remote)
            REMOTE+=( "$2" )
            shift;;
        -p|--push)
            PUSH=1;;
        -A|--add)
            ADD_REPO=1
            ALIAS=$2
            REPO_URL=$3
            shift; shift;;
        -H|--host)
            REMOTE_URL=$2
            shift;;
        -D|--delete)
            DEL_REPO=1
            ALIAS=$2
            shift;;
        -L|--list)
            LIST=1;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1;;
        *)
            KEY=${REPO:+$1}
            REPO=${REPO:-$1}
    esac
    shift
done
[[ -z "$REPO" ]] && usage && exit 1
((SYNC_ALL)) && [[ -n "${REMOTE[@]}" ]] && echo "Incompatible options: -a and -r" && usage && exit 1
REMOTE_URL=${REMOTE_URL:-$RURL}
HAS_REMOTE=${REMOTE_URL:+1}
###

## get all declared remote repositories
get_remotes() {
    local IFS_old=$IFS
    local IFS=$'\n'
    for r in $(git remote); do
        remotes[$r]=1
    done
    IFS=$IFS_old
}

check_remotes() {
    ## get remote repositories
    get_remotes
    ## check if specified remotes are declared
    local not_declared=0
    for r in ${REMOTE[@]}; do
        if ! ((${remotes[$r]})); then
            not_declared=1
            echo "Remote repository "$r" is not declared"
        fi
    done
    ((not_declared)) && return 1
    return 0
}

## check repository state
check_local_state() {
    local s=$(git status --porcelain)
    if [[ -n "$s" ]]; then
        echo "Please, commit your changes first:"
        echo "$s"
        return 1
    fi
    return 0
}

check_status() {
    ## update remote repositories status
    if ((SYNC_ALL)); then
        git remote update
    else
        git remote update origin
    fi
    git status
    return 0
}


## synchronise repositories
synchronise() {
    ## TODO: check returned state
    if ((PUSH)); then
        for e in ${REMOTE[@]}; do
            echo "Pushing changes to remote repository '$e'..."
            git push "$e" master
        done
    else
        for e in ${REMOTE[@]}; do
            echo "Syncing remote repository '$e'..."
            git pull "$e" master
        done
    fi
    return 0
}

###

## check if a remote repository exists
_remote_head=
does_remote_exist() {
    ! ((HAS_REMOTE)) && return 0
    pushd /tmp 2>&1 >/dev/null
    _remote_head=$(git ls-remote ${REMOTE_URL} HEAD 2>/dev/null)
    local r=$?
    popd 2>&1 >/dev/null
    if ((r)); then
        echo "Remote repository '$REPO' doesn't exist on host '$REMOTE_URL'."
        echo "If you're using GitHub as your central repository, we can create it for you."
        read -p "Do you want to create a new repository on GitHub ? (y/N) " r
        r=${r:-N}
        if [[ "$r" =~ ^\ *[yY] ]]; then
            ! create_gh_repo "$name" "$pwd" && echo "Failed to create repository on GitHub." && HAS_REMOTE=0
        else
            HAS_REMOTE=0
        fi
        return 1
    fi
    return 0
}

_resp=
_prompt() {
    _resp=
    local s="$1"
    local f=${2:-0}
    local p=${3}
    ((p==0)) && p=
    local m=${4:+1}
    local mt=$4
    local x
    while ((1)); do
        read ${p:+-s} -p "$s" x
        ((p)) && echo
        ! ((f)) && break
        if ((m)); then
            [[ "$x" =~ ^\ *${mt}\ *$ ]] && break
            echo "(unknown response '$x')"
        else
            ! [[ "$x" =~ ^\ *$ ]] && break
        fi
    done
    _resp="$x"
    [[ "$x" =~ ^[\ .]*$ ]] && return 1
    return 0
}
create_gh_repo() {
    ! _prompt "User: " && echo "Aborting." && return 1
    local user="$_resp"
    ! _prompt "Password (no echo): " 1 1 && echo "Aborting." && return 1
    local pwd="$_resp"
    local resp=$(curl -s -w "%{http_code}" -u "${user}:${pwd}" https://api.github.com/user/repos -d '{"name":"'${REPO}'"}' -o /dev/null 2>/dev/null)
    case $resp in
        200|201|202)
            ;;
        401)
            echo "Unauthorized operation: please, check your credentials."
            return 1;;
        422)
            echo "A repository named '$REPO' already exits."
            return 1;;
        *)
            echo "Unknown error: $resp"
            return 1;;
    esac
    return 0
}

_create_attributes() {
    cat > .gitattributes <<EOC
* filter=git-crypt diff=git-crypt
.gitattributes !filter !diff
*.key filter=git-crypt diff=git-crypt
EOC
}
_create_gitignore() {
    cat > .gitignore <<EOC
.gitattributes
local/
*~
.*.sw*
.~*#
EOC
    git add .gitignore
}
_add_repo() {
    ! git remote add ${ALIAS:-origin} ${REMOTE_URL} 1>/dev/null && echo "Failed to add remote repository '${REMOTE_URL}' (${ALIAS:-origin})" && return 1
    return 0
}
_init_common() {
    mkdir -p "$RHOME/$REPO"
    cd "$RHOME/$REPO"
    git init 1>/dev/null
    ((HAS_REMOTE)) && _add_repo
    _create_attributes
}
_sync_repo() {
    ! ((HAS_REMOTE)) && return 1
    local x r
    x=$(git push -u ${ALIAS:-origin} master 2>&1)
    r=$?
    (($r)) && echo "Failed." && echo "$x" && return 1
    return 0
}
_initialise_repo() {
    _init_common
    git-crypt init 1>/dev/null
    _create_gitignore
    git commit -m"init" 1>/dev/null
    _sync_repo
    local key=$(mktemp -u kkXXXXXXX)
    local pkey=/tmp/${key}.gpg
    #git-crypt export-key /tmp/$key 1>/dev/null || return 1
    
    echo "Please, enter a passphrase to protect your private key."
    git-crypt export-key -- - | GPG_AGENT_INFO="" gpg --no-use-agent -o "$pkey" --cipher-algo AES256 --symmetric --set-filename "$key"

    echo "Your private key is in '$pkey'."
    return 0
}
register_repo() {
    if ! (( HAS_REMOTE )); then
        echo "WARNING: you didn't specify a remote URL to link to."
        echo "You can specify one either by setting RURL=<URL> in $HOME/.ghfsync/ghfsync.conf"
        echo "or by passing a valid URL to the option -u."
        return 1
    fi
    if [[ -z "$KEY" ]]; then
        ! _prompt "Path to shared key: " 1 && echo "Aborting." && return 1
        KEY=$_resp
        ! [[ -f "$KEY" ]] && echo "Key not found in '$KEY'" && return 1
    fi
    _init_common
    local x r
    x=$(git pull --depth 1 origin master 2>&1)
    r=$?
    (($r)) && echo "Failed to link repository." && echo "$x" && return 1
    git-crypt unlock "$KEY" 1>/dev/null || return 1
    return 0
}
## create a new shared repository
create_repo() {
    ## check remote repository
    local new_repo=0
    if ! does_remote_exist; then
        new_repo=1
    fi
    if ((new_repo)) || [[ -z "$_remote_head" ]]; then
        _initialise_repo
    else
        echo "Warning: remote repository '$REPO' contains commits."
        if ! _prompt "Do you want to continue to create (c) a new repository or do you prefer to register (r) an existing one ? (c/r) " 1 0 '[CcRr]'; then
            echo "Aborting."
            exit 1
        fi
        local r=0
        if [[ "$_resp" =~ ^\ *[Cc] ]]; then
            _initialise_repo
            r=$?
        elif [[ "$_resp" =~ ^\ *[Rr] ]]; then
            register_repo
            r=$?
        fi
        ((r)) && echo "Creation of new repository failed." && return 1
        return 0
    fi
}

add_remote() {
    REMOTE_URL=$REPO_URL
    ! [[ -n "$REPO_URL" && -n "$ALIAS" ]] && echo "Missing parameter for remote repository." && usage && exit 1
    if ! does_remote_exist; then
        if ! ((HAS_REMOTE)); then
            echo "Remote repository's $ALIAS not added."
            exit 1
        fi
    fi
    _add_repo && echo "Remote '$ALIAS' added." || return 1
    [[ -z "$_remote_head" ]] && { _sync_repo || return 1; }
    return 0
}

## manage existing repository
manage_repo() {
    cd "$RHOME/$REPO"
    ## only check status
    ((STATUS)) && { check_status;  return $?; }
    ((LIST)) && { git remote; return $?; }
    ((ADD_REPO)) && { add_remote; return $?; }
    ((DEL_REPO)) && { git remote remove "$ALIAS" && echo "$ALIAS removed."; return 0; }
    ## sync with remotes
    if ((SYNC_ALL)); then
        for r in ${!remotes[@]}; do
            REMOTE+=( "$r" )
        done
    fi
    [[ -z "${REMOTE[@]}" ]] && REMOTE=( "origin" )
    check_remotes || return 1
    check_local_state || return 1
    synchronise || return 1
    return 0
}

res=0
if ((NEW_REPO)); then
    ## check if repository exists
    [[ -d "$RHOME/$REPO" ]] && echo "Repository '$REPO' already exits in '$RHOME'." && exit 1
    ! [[ "${REMOTE_URL}" =~ \.git$ ]] && REMOTE_URL=${REMOTE_URL}/${REPO}.git
    create_repo && echo OK
elif ((LINK)); then
    [[ -d "$RHOME/$REPO" ]] && echo "Repository '$REPO' already exits in '$RHOME'." && exit 1
    ! [[ "${REMOTE_URL}" =~ \.git$ ]] && REMOTE_URL=${REMOTE_URL}/${REPO}.git
    register_repo && echo OK
    res=$?
else
    ## check if repository exists
    ! [[ -d "$RHOME/$REPO" ]] && echo "Repository '$REPO' doesn't exist in '$RHOME'" && exit 1
    manage_repo || echo "Failed."
fi
